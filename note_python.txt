# -*- coding:utf-8 -*-

1、格式化字符串的方法
format()
例如：>>>'Hello,{0},成绩提升了 {1:.1f}%'.format('小明",17.125)
'Hello,小明,成绩提升了17,。1%'

2、list（列表）
访问list用索引，0~len()-1,超出部分会报IndexError
list追加元素到末尾
list.append('XXX')
list插入元素到指定位置,比如索引号为1的位置
list.insert(1,'XXX')
删除list末尾的元素，用pop()方法
例如：list=['1','2','3']
>>>list.pop()
'3'
>>>list
['1','2']
删除指定位置元素用pop(i)方法，I为索引位置
>>>list.pop(2)
'2'
>>>list
['1','3']
如果要替换list其中指定元素,可以直接复制给对应索引位置
>>>list[1] = 'S'
>>>list
['1','S','3']
list排序
list.sort()

3、tuple(元组）
类似list，但是一旦初始化不可修改，只可提取不可修改
只有一个元素的tuple定义时必须加逗号
>>>t=(1,)
>>>t
(1,)

4、循环
for x in range(2,100)

5、dictionary(字典)
dict的key是不可变对象
判断dict的key是否存在之一
>>>'a' in dict
False
判断dict的key是否存在之二(返回为空）
>>>dict.get('a')
删除一个key，用pop(key)方法，对应的value也会删除
>>>dict.pop('a')
b

list与dict特点对比
dict:1、查找和插入的速度极快，不会随着key的增加的变慢
 2、需要占用大量的内存，内存浪费多

list:1、查找和插入的时间随着元素的增加而增加
 2、占用空间小，浪费内存很少

5、set
set与dict类似，是一组key的组合，但不存储value
要创建一个set，需要提供一个list作为输入集合
>>>s = set([1,2,3])
>>>s
{1,2,3} # 显示内容表示set内部有这3个元素，不代表序列
重复元素在set中将会被自动过滤
可以通过add(key)返回添加元素，可以重复添加，但是不会有效果
>>>s.add(4)
>>>
{1,2,3,4}
可以通过remove(key)方法删除元素
>>>s.remove(4)
>>>s
{1,2,3}
set可以看作是数学意义上的无序和无重复元素的集合，因此可以做数学意义上的并集交集

6、函数的参数
位置参数
例如：
def power(x):
    return x*x

对于power(x)函数，参数x就是一个位置函数，调用时必须且仅有一个参数x
默认参数
def power(x,n=2)
    s=1
    while n>0
        n=n-1
        s=s*n
    ruturn s

n=2是默认参数可不填，当n>2是必须明确传入
设置默认参数时需注意：
1、必选参数在前，默认参数在后，否则Python解释器会报错
2、设置默认参数将变化大的参数放前面，变化小的参数放后面，变化小的函数可以作为默认函数
设置默认函数能降低调用函数的难度
定义默认参数时必须指向不可变对象
可变参数
定义可变参数是在参数前面添加一个*号，在函数内部参数接受的是一个tuple，调用函数时可以传入任意个参数，包括0个函数
*nums表示把nums这个list或tuple的所有元素作为可变参数传进去
可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple
关键字参数
关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
例如：
def person(name,age,**kw):
    print('name',name,'age',age,'other:',kw)
函数person除了必须参数name和age外，还接受关键字参数kw。在调用该函数时，可以紫川录必选函数
>>>person('jack',30)
name:jack age:30 other:{}
也可以传入任意个数的关键字参数：
>>>person('Bob',35,city='Beijing')
name:Bob age:35 other:{'city':'Beijing'}
关键字参数可以扩展函数的功能，比如在person函数里，我们保证能接收到name和age这2个参数，但是，如果调用者愿意提供更多的参数，我们也能收到
命名关键字参数
对于传入的参数可以在函数内部通过kw检查
命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数
例如：
def peison(name,age,*,city,job)
    print(name,age,city,job)
调用方式如下
>>>peison('Jack',24,city='Beijing',job='Engineer')
Jack 24 Beijing Engineer
如果函数定义中已经有一个可变参数，后面的命名参数就不需要一个特殊分隔符*了
例如：
def person(name,age,*args,city,job):
    print(name,age,args,city,job)
参数组合
参数顺序必须是：必选参数、默认参数、可变参数、命名关键参数、关键字参数
对于任意函数，都可以通过func(*args,**kw)的形式调用
参数小结：
默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误
要注意定义可变参数和关键字参数的语法：
*args是可变参数，args接收的是一个tuple;
**kw是关键字参数，kw接受的是一个dict
调用函数时如何传入可变参数和关键字参数的语法：
可变参数暨可以直接传入：func(1,2,3),又可以先组装list或tuple,在通过*args传入：func(*(1,2,3))
关键字参数既可以直接传入：func(a=1,b=2),又可以先组装dict,在通过**kw传入：func(**{'a':1,'b':2})
使用*args和**kw是Python的习惯写法，最好使用
命名的关键字参数时为了限制调用者可以传入的参数名，同时可以提供默认值
定义命名的关键字参数在没有可变参数的情况下不要忘了*，否则定义的是位置参数

7、Slice(切片)
L[0:3] 表示，从索引0开始取，直到索引3为止，但不包括索引3
若第一个索引是0，还可以省略 L[:3]
L[-1] 表示取倒数的第一个元素，倒数第一个元素的索引是-1
tuple和字符串‘XXX’可以看作一种list，可以使用切片操作

8、Iteration(迭代)
在Python中，迭代是通过for...in来完成的
如何判断一个对象是可迭代对象？可以通过collectiona模块的iterable类型判断
>>>from collections import Iterable
>>>isinstance('abc',Iterable)#str是否可迭代
Ture
对list实现类似Java那样的下标循环，可以通过Python内置函数enumerate(枚举）函数可以把一个list变成索引-元素对，
这样可以在for循环中同时迭代索引和元素本身
>>>for i,value in enmerate(['A','B','C']:
...    print(i,value)
...
0 A
1 B
2 C

9、List Comprehensions(列表生成器)
list(range(11))
循环+判断
>>>[x*x for x in range(1,11) if x%2 == 0]
[4,16,36,64,100]
两层循环
>>>[m + n for m in 'ABC' for n in 'XYZ']

10、generator（生成器）
>>>L = [x*x for x in range(10)]-----list comperhensions列表生成器
>>>L
[0,1,4,9,16,25,36,49,64,81]
>>>g = (x*x for x in range(10))-----generator（生成器）生成器
>>>g
<generator object<genexpr> at 0x1022ef630(16进制地址)>
如果要打印出generator可以通过next()函数获得generator的返回值
正确调用generator方式是用for 循环
>>>g =(x*x for x in range(3))
>>>for n in g:
...    print(n)
...
0
1
4
9
定义generator的另一种方法，如果函数定义中包含yield关键字，就是generator
generator和函数的执行流程不一样，函数是顺序执行，当遇到return语句或者最后一行函数语句就返回，
而generator的函数在每次调用next（）的是否执行，遇到yield语句返回，再次执行时从上次返回的yield出执行
但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，
必须捕获StopIteration错误，返回值包含在StopIteration的value中：
>>>g = fib(6)
>>>while True:
...    try:
...        x = next(g)
...        print('g:', x)
...    except StopIteration as e:
...        print('Generator return value:', e.value)
...        break
...
g: 1
g: 1
g: 2
g: 3
g: 5
g: 8
Generator return value: done